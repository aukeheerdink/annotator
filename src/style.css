:root {
  font-size: 1rem;
  line-height: 1.5rem;
  font-weight: 400;

  color: var(--color-foreground);
  background-color: var(--color-background);
  font-family: Roboto, Inter, Avenir, Helvetica, Arial, sans-serif;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

@font-face {
  font-family: 'Roboto';
  src: url('stitch-assets/RobotoFlex-VariableFont.ttf');
}

@font-face {
  font-family: 'Roboto Mono';
  src: url('stitch-assets/RobotoMono-VariableFont.ttf');
}

.row {
  display: flex;
  justify-content: center;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

button {
  cursor: pointer;
}

button:hover {
  border-color: #396cd8;
}

#greet-input {
  margin-right: 5px;
}

.s:not(.swap) {
  width: calc(var(--w) * 1.001ch);
  transform:
    scaleX(calc(var(--w) / var(--i)));
  display: inline-block;
  color: var(--color-halfway);
  transform-origin: center left;
}

.s.swap,
.s.swap {
  text-decoration: underline var(--color-halfway);
}

.alignment .alignment-body .template,
.alignment .alignment-body .numbering {
  grid-column: 1/ -1;
}

.alignment .alignment-wrapper {
  margin-left: 0;
}

.input-settings {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr 2fr;
  gap: .5rem;
}

@media (max-width: 1000px) {
  .input-settings {
    grid-template-columns: 1fr 2fr;
  }
}

.input-settings input,
.input-settings textarea,
.input-settings button,
.input-settings select {
  background: var(--color-background);
  color: var(--color-foreground);
  border: 2px solid var(--color-halfway);
  border-radius: 0;
  font-size: 1.2em;
}

.input-settings textarea {
  min-height: 7rem;
  min-width: 100%;
  max-width: 100%;
}

.input-settings button {
  color: var(--color-primary);
  border-color: var(--color-primary);
}

.input-settings h2 {
  grid-column: 1 /-1;
}

.input-settings button {
  grid-column: 2;
}

pre {
  word-wrap: break-word;
  white-space: pre-wrap;
  overflow: hidden;
}

#spectrum-results-wrapper {
  padding: 1em;
}

.custom-model {
  grid-column: 1 / -1;
  display: none;
  grid-template-columns: max-content 1fr 1fr;
  gap: inherit;
}

.input-settings:has(option[value="custom"]:checked) .custom-model {
  display: grid;
}

.custom-model .col-2 {
  grid-column: span 2;
}

.custom-model .location {
  display: flex;
}

.custom-model .location * {
  flex-grow: 1;
  width: 1px;
}

.custom-model .location input {
  display: none;
}

.custom-model .location:has(select.arg-1) input:nth-of-type(1),
.custom-model .location:has(select.arg-2) input:nth-of-type(1),
.custom-model .location:has(select.arg-2) input:nth-of-type(2) {
  display: block;
}


/* spectrum-graph */
.spectrum-graph {
  --graph-height: 500px;
  --graph-height-inc: calc(var(--graph-height) + 10px);
  --color: red;
  --radius: 50%;
  margin-top: 1rem;
}

.spectrum-graph label {
  border: 2px solid var(--color-halfway);
  padding: .25rem;
  user-select: none;
  border-radius: 5px;
}

.spectrum-graph label:has(+input:checked),
.spectrum-graph label:has(input:checked) {
  border-color: var(--color-primary);
}

.spectrum-graph .plot {
  display: flex;
  flex-basis: 100%;
}

.spectrum-graph .y-axis {
  display: flex;
  flex-direction: column;
  height: var(--graph-height-inc);
  justify-content: space-between;
  align-items: flex-end;
  border-right: 2px solid var(--color-foreground);
  padding-right: 2px;
  position: relative;
}

.spectrum-graph .y-axis::after {
  content: "";
  display: block;
  position: absolute;
  height: 2px;
  width: calc(100vw - 200% - 55px);
  left: 100%;
  background-color: var(--color-foreground);
  top: var(--graph-height-inc);
  z-index: 0;
}

.spectrum-graph .y-axis .title {
  writing-mode: vertical-lr;
  align-self: center;
  transform: rotate(180deg);
}

.spectrum-graph .y-axis .max,
.spectrum-graph .y-axis .min {
  font-size: 10px;
}

.spectrum-graph .y-axis::after,
.spectrum-graph .x-axis::after {
  display: none;
}

.spectrum-graph .x-axis {
  position: absolute;
  width: 100%;
  border-top: 2px solid var(--color-foreground);
  top: calc(var(--abs-top) - 1px);
}

.spectrum-graph:has(#relative:checked) .x-axis {
  top: calc(var(--rel-top) - 1px);
}

.spectrum-graph .x-axis .title {
  margin: 0;
  text-align: center;
}

.spectrum-graph .data {
  position: relative;
  flex-grow: 1;
  overflow: hidden;
}

.spectrum-graph .point {
  width: 5px;
  height: 5px;
  background-color: var(--color);
  border-radius: var(--radius);
  position: absolute;
  top: calc(100% * (var(--abs-max) - var(--abs)) / (var(--abs-max) - var(--abs-min)));
  left: calc(100% * (var(--mz-max) - var(--mz)) / (var(--mz-max) - var(--mz-min)));
  display: block;
  z-index: 0;
  opacity: calc(var(--intensity) * 0.5 + 50%);
}

.spectrum-graph:has(#relative:checked) .point {
  top: calc(100% * (var(--rel-max) - var(--rel)) / (var(--rel-max) - var(--rel-min)));
}

.spectrum-graph:has(#mass:checked) .point {
  left: calc(100% * (var(--mass-max) - var(--mass)) / (var(--mass-max) - var(--mass-min)));
}

.spectrum-graph:has(#relative:checked) .abs,
.spectrum-graph:has(#absolute:checked) .rel,
.spectrum-graph:has(#mz:checked) .mass,
.spectrum-graph:has(#mass:checked) .mz {
  display: none;
}

.spectrum-graph:has(#intensity:checked) .point {
  width: calc(var(--intensity) * 6px + 2px);
  height: calc(var(--intensity) * 6px + 2px);
}

.spectrum-graph .a {
  --color: var(--color-primary);
  z-index: 1;
}

.spectrum-graph .b {
  --color: var(--color-secondary);
  z-index: 1;
}

.spectrum-graph .c {
  --color: var(--color-tertiary);
  z-index: 1;
}

.spectrum-graph .d {
  --color: var(--color-quaternary);
  --radius: 0;
  z-index: 1;
}

.spectrum-graph .v {
  --color: var(--color-quinary);
  --radius: 0;
  z-index: 1;
}

.spectrum-graph .w {
  --color: var(--color-primary);
  --radius: 0;
  z-index: 1;
}

.spectrum-graph .x {
  --color: var(--color-quaternary);
  z-index: 1;
}

.spectrum-graph .y {
  --color: var(--color-quinary);
  z-index: 1;
}

.spectrum-graph .z,
.spectrum-graph .z· {
  --color: var(--color-primary-s1);
}

.spectrum:has(.permanent) .spectrum-graph .point,
.spectrum:has(.permanent):has(.wrapper.unassigned) .spectrum-graph .unassigned {
  opacity: 0.2;
}

.spectrum-graph .data .point.unassigned {
  --color: var(--color-halfway);
  z-index: 0;
  opacity: 0;
}

.spectrum:has(.wrapper.unassigned) .spectrum-graph .unassigned {
  opacity: 1;
}

.spectrum:has(.a.permanent) .spectrum-graph .a,
.spectrum:has(.b.permanent) .spectrum-graph .b,
.spectrum:has(.c.permanent) .spectrum-graph .c,
.spectrum:has(.d.permanent) .spectrum-graph .d,
.spectrum:has(.v.permanent) .spectrum-graph .v,
.spectrum:has(.w.permanent) .spectrum-graph .w,
.spectrum:has(.x.permanent) .spectrum-graph .x,
.spectrum:has(.y.permanent) .spectrum-graph .y,
.spectrum:has(.z.permanent) .spectrum-graph .z,
.spectrum:has(.z.permanent) .spectrum-graph .z· {
  opacity: 1;
}