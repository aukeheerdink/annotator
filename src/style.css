:root {
  font-size: 1rem;
  line-height: 1.5rem;
  font-weight: 400;

  color-scheme: light dark;
  color: var(--color-foreground);
  background-color: var(--color-background);
  font-family: Roboto, Inter, Avenir, Helvetica, Arial, sans-serif;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

@font-face {
  font-family: 'Roboto';
  src: url('stitch-assets/RobotoFlex-VariableFont.ttf');
}

@font-face {
  font-family: 'Roboto Mono';
  src: url('stitch-assets/RobotoMono-VariableFont.ttf');
}

.row {
  display: flex;
  justify-content: center;
}

button {
  cursor: pointer;
}

.s:not(.swap) {
  width: calc(var(--w) * 1.001ch);
  transform:
    scaleX(calc(var(--w) / var(--i)));
  display: inline-block;
  color: var(--color-halfway);
  transform-origin: center left;
}

.s.swap,
.s.swap {
  text-decoration: underline var(--color-halfway);
}

.alignment .alignment-body .template,
.alignment .alignment-body .numbering {
  grid-column: 1/ -1;
}

.alignment .alignment-wrapper {
  margin-left: 0;
}

.input-settings {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr 2fr;
  gap: .5rem 1rem;
}

@media (max-width: 1000px) {
  .input-settings {
    grid-template-columns: 1fr 2fr;
  }
}

.input-settings input,
.input-settings textarea,
.input-settings button,
.input-settings select,
.peptide-input,
button {
  background: var(--color-background);
  color: var(--color-foreground);
  border: 2px solid var(--color-halfway);
  border-radius: 0;
  font-size: 1.2em;
}

button.print {
  margin: 1em;
}

.input-settings option {
  background: var(--color-background);
}

.input-settings textarea,
.peptide-input {
  font-family: 'Roboto Mono', monospace;
  min-height: 2rem;
  resize: vertical;
  word-wrap: break-word;
  word-break: break-all;
  white-space: pre-wrap;
}

.peptide-input .error {
  text-decoration: underline;
  text-decoration-style: wavy;
  text-decoration-color: red;
}

.input-settings .wide {
  grid-column: 1/-1;
}

.input-settings button {
  color: var(--color-primary);
  border-color: var(--color-primary);
}

.input-settings h2 {
  grid-column: 1 /-1;
}

.input-settings .col-2 {
  grid-column: 2;
}

.input-settings .combined-input {
  display: flex;
}

.input-settings .combined-input span {
  margin-left: .5rem;
}

pre {
  word-wrap: break-word;
  white-space: pre-wrap;
  overflow: hidden;
  padding: 0 1rem;
}

#spectrum-error {
  margin: .5rem;
  padding-left: .5rem;
  border: 2px solid red;
}

#spectrum-error .title {
  color: red;
}

#spectrum-wrapper {
  padding: 1em;
}

.hidden {
  display: none;
}

.custom-model {
  grid-column: 1 / -1;
  display: none;
  grid-template-columns: max-content 1fr 1fr;
  gap: inherit;
}

.input-settings:has(option[value="custom"]:checked) .custom-model {
  display: grid;
}

.custom-model .col-2 {
  grid-column: span 2;
}

.custom-model .location {
  display: flex;
}

.custom-model .location * {
  flex-grow: 1;
  width: 1px;
}

.custom-model .location input {
  display: none;
}

.custom-model .location:has(select.arg-1) input:nth-of-type(1),
.custom-model .location:has(select.arg-2) input:nth-of-type(1),
.custom-model .location:has(select.arg-2) input:nth-of-type(2) {
  display: block;
}


/* spectrum-graph */
.spectrum .canvas-wrapper {
  height: calc(2 * var(--height));
  grid-template-rows: 1fr 2em 1fr;
  grid-template-areas:
    "y-axis canvas"
    ". x-axis"
    "sg-y-axis spectrum-graph";
}

.spectrum .spectrum-graph {
  --graph-height: 500px;
  --graph-height-inc: calc(var(--graph-height) + 10px);
  --color: red;
  --radius: 50%;
  display: flex;
  flex-basis: 100%;
  grid-area: spectrum-graph;
  position: relative;
  overflow: hidden;
  border-bottom: none;
}

.spectrum-graph>label {
  border: 2px solid var(--color-halfway);
  padding: .25rem;
  user-select: none;
  border-radius: 5px;
}

.spectrum-graph label:has(+input:checked),
.spectrum-graph label:has(input:checked) {
  border-color: var(--color-primary);
}

.spectrum-graph-y-axis {
  grid-area: sg-y-axis;
  display: flex;
  flex-direction: column;
  height: var(--graph-height-inc);
  justify-content: space-between;
  align-items: flex-end;
  padding-right: 2px;
  position: relative;
  overflow: hidden;
}

.spectrum-graph-y-axis::after {
  content: "";
  display: block;
  position: absolute;
  height: 2px;
  width: calc(100vw - 200% - 55px);
  left: 100%;
  background-color: var(--color-foreground);
  top: var(--graph-height-inc);
  z-index: 0;
}

.spectrum-graph-y-axis .title {
  writing-mode: vertical-rl;
  align-self: center;
  transform: rotate(180deg);
  font-style: italic;
  color: var(--color-halfway);
}

.spectrum-graph :is(.y-axis, .x-axis) :is(.max, .min) {
  font-size: 10px;
}

.spectrum-graph-y-axis::after,
.spectrum-graph .x-axis::after {
  display: none;
}

.spectrum-graph-y-axis svg {
  transform: translate(2px, 0);
  position: absolute;
  width: 2rem;
  height: 100%;
}

.spectrum-graph-y-axis svg .line {
  stroke: var(--color-primary);
  stroke-width: var(--stroke-spectrum);
  fill: transparent;
}

.spectrum-graph-y-axis svg .volume {
  fill: var(--color-primary-o);
}

.spectrum-graph .x-axis {
  position: absolute;
  width: 100%;
  border-top: 2px solid var(--color-foreground);
  top: clamp(0px, calc(var(--y-max) / (var(--y-max) - var(--y-min)) * 100% - 1px), 100%);
  pointer-events: none;
}

.spectrum-graph .x-axis.hug-bottom {
  top: unset !important;
  bottom: 0px !important;
  border-top: none;
  border-bottom: 2px solid var(--color-foreground);
}

.spectrum-graph .point.unassigned {
  z-index: 1;
}

.spectrum-graph .point {
  width: 5px;
  height: 5px;
  background-color: var(--color);
  border-radius: var(--radius);
  position: absolute;
  top: calc(100% * (var(--y-max) - var(--abs)) / (var(--y-max) - var(--y-min)));
  left: calc(100% * (1 - (var(--max-mz) - var(--mz)) / (var(--max-mz) - var(--min-mz))));
  display: block;
  z-index: 2;
}

.spectrum:has(#relative:checked) .point {
  top: calc(100% * (var(--y-max) - var(--rel)) / (var(--y-max) - var(--y-min)));
}

.spectrum-graph .ruler {
  border-top: 2px dashed var(--color-foreground);
  width: 100%;
  height: 0;
  left: 0;
  right: 0;
  display: none;
  opacity: 0.5;
  position: absolute;
  pointer-events: none;
}

.spectrum-graph:hover .ruler {
  display: block;
}

.spectrum:has(#relative:checked) .abs,
.spectrum:has(#absolute:checked) .rel {
  display: none;
}

.spectrum:has(#intensity:checked) .point {
  width: calc((var(--intensity)) / var(--max-intensity) * 6px + 2px);
  height: calc((var(--intensity)) / var(--max-intensity) * 6px + 2px);
}

.spectrum .spectrum-graph.highlight .point {
  opacity: 0.2;
}

.spectrum .spectrum-graph.highlight .point.highlight {
  opacity: 1;
}

.spectrum-graph-y-axis .density.rel {
  --scale: calc((var(--rel-max-initial) - var(--rel-min-initial)) / (var(--y-max) - var(--y-min)));
  --translate: calc((var(--y-max) - var(--rel-max-initial)) / (var(--rel-max-initial) - var(--rel-min-initial)) * var(--height));
}

.spectrum-graph-y-axis .density.abs {
  --scale: calc((var(--abs-max-initial) - var(--abs-min-initial)) / (var(--y-max) - var(--y-min)));
  --translate: calc((var(--y-max) - var(--abs-max-initial)) / (var(--abs-max-initial) - var(--abs-min-initial)) * var(--height));
}

.spectrum-graph-y-axis .density {
  transform:
    scale(1, var(--scale)) translate(0, var(--translate));
}

/* Loading animation */
button.loading {
  pointer-events: none;
  border-color: var(--color-halfway);
  color: var(--color-halfway);
}

button.loading::after {
  content: ".";
  display: inline-block;
  animation: rotate 1s infinite linear;
  margin-left: 1rem;
}

@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}